{
  "openapi": "3.0.1",
  "info": {
    "title": "FINBOURNE Notifications API",
    "termsOfService": "https://www.finbourne.com/legal/terms-conditions",
    "contact": {
      "name": "FINBOURNE Technology",
      "url": "https://www.finbourne.com",
      "email": "info@finbourne.com"
    },
    "version": "0.1.772.3",
    "x-logo": {
      "url": "https://www.lusid.com/app/assets/logo_white.png",
      "backgroundColor": "#415464"
    },
    "description": "FINBOURNE Technology"
  },
  "servers": [
    {
      "url": "https://www.lusid.com/notification"
    }
  ],
  "paths": {
    "/api/eventtypes": {
      "get": {
        "tags": [
          "EventTypes"
        ],
        "summary": "[EXPERIMENTAL] ListEventTypes: Lists all of the available event types.",
        "operationId": "ListEventTypes",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfEventTypeSchema"
                },
                "example": {
                  "values": [
                    {
                      "id": "TestId",
                      "displayName": "TestDisplayName",
                      "description": "TestDescription",
                      "entity": "TestEntity",
                      "application": "TestApplication",
                      "headerSchema": [
                        {
                          "name": "eventType",
                          "type": "String"
                        },
                        {
                          "name": "requestId",
                          "type": "String"
                        },
                        {
                          "name": "userId",
                          "type": "String"
                        },
                        {
                          "name": "action",
                          "type": "String"
                        },
                        {
                          "name": "entityType",
                          "type": "String"
                        },
                        {
                          "name": "timestamp",
                          "type": "DateTime"
                        },
                        {
                          "name": "href",
                          "type": "String"
                        }
                      ],
                      "bodySchema": [
                        {
                          "name": "scope",
                          "type": "String"
                        }
                      ],
                      "href": "Test:firstString"
                    }
                  ],
                  "href": "Test:hrefUriString",
                  "nextPage": "nextString",
                  "previousPage": "previousString",
                  "links": [
                    {
                      "relation": "NextPage",
                      "href": "Test:nextUriString",
                      "method": "GET"
                    },
                    {
                      "relation": "PreviousPage",
                      "href": "Test:previousUriString",
                      "method": "GET"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "No event types found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/eventtypes/{eventType}": {
      "get": {
        "tags": [
          "EventTypes"
        ],
        "summary": "[EXPERIMENTAL] GetEventType: Gets the specified event type schema.",
        "operationId": "GetEventType",
        "parameters": [
          {
            "name": "eventType",
            "in": "path",
            "description": "The event type to retrieve schema for.",
            "required": true,
            "schema": {
              "maxLength": 512,
              "minLength": 0,
              "pattern": "^[a-zA-Z]*$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventTypeSchema"
                },
                "example": {
                  "id": "TestId",
                  "displayName": "TestDisplayName",
                  "description": "TestDescription",
                  "entity": "TestEntity",
                  "application": "TestApplication",
                  "headerSchema": [
                    {
                      "name": "eventType",
                      "type": "String"
                    },
                    {
                      "name": "requestId",
                      "type": "String"
                    },
                    {
                      "name": "userId",
                      "type": "String"
                    },
                    {
                      "name": "action",
                      "type": "String"
                    },
                    {
                      "name": "entityType",
                      "type": "String"
                    },
                    {
                      "name": "timestamp",
                      "type": "DateTime"
                    },
                    {
                      "name": "href",
                      "type": "String"
                    }
                  ],
                  "bodySchema": [
                    {
                      "name": "scope",
                      "type": "String"
                    }
                  ],
                  "href": "Test:firstString"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "No event type exists with the specified type",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/manualevent": {
      "post": {
        "tags": [
          "ManualEvent"
        ],
        "summary": "[EXPERIMENTAL] TriggerManualEvent: Trigger a manual event.",
        "operationId": "TriggerManualEvent",
        "requestBody": {
          "description": "The data required to trigger a manual event.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ManualEventRequest"
              },
              "example": {
                "Body": {
                  "subject": "TestSubject",
                  "message": "TestMessage",
                  "jsonMessage": {
                    "TestField1": "TestValue1",
                    "TestField2": "TestValue2"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManualEventRequest"
              },
              "example": {
                "Body": {
                  "subject": "TestSubject",
                  "message": "TestMessage",
                  "jsonMessage": {
                    "TestField1": "TestValue1",
                    "TestField2": "TestValue2"
                  }
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ManualEventRequest"
              },
              "example": {
                "Body": {
                  "subject": "TestSubject",
                  "message": "TestMessage",
                  "jsonMessage": {
                    "TestField1": "TestValue1",
                    "TestField2": "TestValue2"
                  }
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ManualEventRequest"
              },
              "example": {
                "Body": {
                  "subject": "TestSubject",
                  "message": "TestMessage",
                  "jsonMessage": {
                    "TestField1": "TestValue1",
                    "TestField2": "TestValue2"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManualEvent"
                },
                "example": {
                  "header": {
                    "eventType": "Manual",
                    "timestamp": "1970-01-01T00:00:00.0000000+00:00",
                    "userId": "TestUserId",
                    "requestId": "TestRequestId"
                  },
                  "body": {
                    "subject": "TestSubject",
                    "message": "TestMessage",
                    "jsonMessage": {
                      "TestField1": "TestValue1",
                      "TestField2": "TestValue2"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/metadata/access/resources": {
      "get": {
        "tags": [
          "Application Metadata"
        ],
        "summary": "[EARLY ACCESS] ListAccessControlledResources: Get resources available for access control",
        "description": "Get the comprehensive set of resources that are available for access control",
        "operationId": "ListAccessControlledResources",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessControlledResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessControlledResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessControlledResource"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/subscriptions": {
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "[EXPERIMENTAL] ListSubscriptions: List subscriptions.",
        "operationId": "ListSubscriptions",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Read more about <see href=\"https://support.lusid.com/filtering-results-from-lusid\"> filtering results from LUSID</see>.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Fields to order the result set. Read more about <see href=\"https://support.lusid.com/filtering-results-from-lusid\" /> filtering results from LUSID.",
            "schema": {
              "maxLength": 16384,
              "minLength": 1,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Encoded page string returned from a previous search result that will retrieve the next page of data. When this field is supplied the filter  field should not be supplied.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of subscriptions to retrieve.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfSubscription"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "TestScope",
                        "code": "TestCode"
                      },
                      "displayName": "TestDisplayName",
                      "description": "TestDescription",
                      "status": "Active",
                      "matchingPattern": {
                        "eventType": "Manual",
                        "filter": "Entity eq 'Portfolio'"
                      },
                      "createdAt": "2020-06-15T12:00:00.0000000+00:00",
                      "userIdCreated": "TestClient",
                      "modifiedAt": "2020-06-20T12:00:00.0000000+00:00",
                      "userIdModified": "TestClient",
                      "useAsAuth": "TestClient",
                      "href": "https://fbn-test.lusid.com/notifications/api/subscriptions/TestScope/TestCode"
                    }
                  ],
                  "href": "Test:hrefUriString",
                  "nextPage": "nextString",
                  "previousPage": "previousString",
                  "links": [
                    {
                      "relation": "NextPage",
                      "href": "Test:nextUriString",
                      "method": "GET"
                    },
                    {
                      "relation": "PreviousPage",
                      "href": "Test:previousUriString",
                      "method": "GET"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "[EXPERIMENTAL] CreateSubscription: Create a new subscription.",
        "operationId": "CreateSubscription",
        "requestBody": {
          "description": "The data to create a subscription",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSubscription"
              },
              "example": {
                "id": {
                  "scope": "TestScope",
                  "code": "TestCode"
                },
                "displayName": "TestDisplayName",
                "description": "TestDescription",
                "status": "Active",
                "matchingPattern": {
                  "eventType": "Manual",
                  "filter": "Body.Message eq 'TestMessage'"
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSubscription"
              },
              "example": {
                "id": {
                  "scope": "TestScope",
                  "code": "TestCode"
                },
                "displayName": "TestDisplayName",
                "description": "TestDescription",
                "status": "Active",
                "matchingPattern": {
                  "eventType": "Manual",
                  "filter": "Body.Message eq 'TestMessage'"
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSubscription"
              },
              "example": {
                "id": {
                  "scope": "TestScope",
                  "code": "TestCode"
                },
                "displayName": "TestDisplayName",
                "description": "TestDescription",
                "status": "Active",
                "matchingPattern": {
                  "eventType": "Manual",
                  "filter": "Body.Message eq 'TestMessage'"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSubscription"
              },
              "example": {
                "id": {
                  "scope": "TestScope",
                  "code": "TestCode"
                },
                "displayName": "TestDisplayName",
                "description": "TestDescription",
                "status": "Active",
                "matchingPattern": {
                  "eventType": "Manual",
                  "filter": "Body.Message eq 'TestMessage'"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                },
                "example": {
                  "id": {
                    "scope": "TestScope",
                    "code": "TestCode"
                  },
                  "displayName": "TestDisplayName",
                  "description": "TestDescription",
                  "status": "Active",
                  "matchingPattern": {
                    "eventType": "Manual",
                    "filter": "Body.Message eq 'TestMessage'"
                  },
                  "createdAt": "2020-06-15T12:00:00.0000000+00:00",
                  "userIdCreated": "TestClient",
                  "modifiedAt": "2020-06-20T12:00:00.0000000+00:00",
                  "userIdModified": "TestClient",
                  "useAsAuth": "TestClient",
                  "href": "https://fbn-test.lusid.com/notifications/api/subscriptions/TestScope/TestCode"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/subscriptions/{scope}/{code}": {
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "[EXPERIMENTAL] GetSubscription: Get a subscription.",
        "operationId": "GetSubscription",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope that identifies a subscription",
            "required": true,
            "schema": {
              "maxLength": 100,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code that identifies a subscription",
            "required": true,
            "schema": {
              "maxLength": 100,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                },
                "example": {
                  "id": {
                    "scope": "TestScope",
                    "code": "TestCode"
                  },
                  "displayName": "TestDisplayName",
                  "description": "TestDescription",
                  "status": "Active",
                  "matchingPattern": {
                    "eventType": "Manual",
                    "filter": "Body.Message eq 'TestMessage'"
                  },
                  "createdAt": "2020-06-15T12:00:00.0000000+00:00",
                  "userIdCreated": "TestClient",
                  "modifiedAt": "2020-06-20T12:00:00.0000000+00:00",
                  "userIdModified": "TestClient",
                  "useAsAuth": "TestClient",
                  "href": "https://fbn-test.lusid.com/notifications/api/subscriptions/TestScope/TestCode"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "No subscription exists in current scope",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "put": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "[EXPERIMENTAL] UpdateSubscription: Update an existing subscription.",
        "operationId": "UpdateSubscription",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope that identifies a subscription",
            "required": true,
            "schema": {
              "maxLength": 100,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code that identifies a subscription",
            "required": true,
            "schema": {
              "maxLength": 100,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The data to update a subscription",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSubscription"
              },
              "example": {
                "displayName": "TestDisplayName",
                "description": "TestDescription",
                "status": "Active",
                "matchingPattern": {
                  "eventType": "Manual",
                  "filter": "Body.Message eq 'TestMessage'"
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSubscription"
              },
              "example": {
                "displayName": "TestDisplayName",
                "description": "TestDescription",
                "status": "Active",
                "matchingPattern": {
                  "eventType": "Manual",
                  "filter": "Body.Message eq 'TestMessage'"
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSubscription"
              },
              "example": {
                "displayName": "TestDisplayName",
                "description": "TestDescription",
                "status": "Active",
                "matchingPattern": {
                  "eventType": "Manual",
                  "filter": "Body.Message eq 'TestMessage'"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSubscription"
              },
              "example": {
                "displayName": "TestDisplayName",
                "description": "TestDescription",
                "status": "Active",
                "matchingPattern": {
                  "eventType": "Manual",
                  "filter": "Body.Message eq 'TestMessage'"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                },
                "example": {
                  "id": {
                    "scope": "TestScope",
                    "code": "TestCode"
                  },
                  "displayName": "TestDisplayName",
                  "description": "TestDescription",
                  "status": "Active",
                  "matchingPattern": {
                    "eventType": "Manual",
                    "filter": "Body.Message eq 'TestMessage'"
                  },
                  "createdAt": "2020-06-15T12:00:00.0000000+00:00",
                  "userIdCreated": "TestClient",
                  "modifiedAt": "2020-06-20T12:00:00.0000000+00:00",
                  "userIdModified": "TestClient",
                  "useAsAuth": "TestClient",
                  "href": "https://fbn-test.lusid.com/notifications/api/subscriptions/TestScope/TestCode"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "No subscription exists in current scope",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "delete": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "[EXPERIMENTAL] DeleteSubscription: Delete a subscription.",
        "operationId": "DeleteSubscription",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope that identifies a subscription",
            "required": true,
            "schema": {
              "maxLength": 100,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code that identifies a subscription",
            "required": true,
            "schema": {
              "maxLength": 100,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "No subscription exists in current scope",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/subscriptions/{scope}/{code}/notifications": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "[EXPERIMENTAL] ListNotifications: List all notifications on a subscription.",
        "operationId": "ListNotifications",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope that identifies a subscription",
            "required": true,
            "schema": {
              "maxLength": 100,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code that identifies a subscription",
            "required": true,
            "schema": {
              "maxLength": 100,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfNotification"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "No notifications exists with the provided filter(s)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "post": {
        "tags": [
          "Notifications"
        ],
        "summary": "[EXPERIMENTAL] CreateNotification: Add a Notification to a Subscription.",
        "operationId": "CreateNotification",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope that identifies a subscription",
            "required": true,
            "schema": {
              "maxLength": 100,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code that identifies a subscription",
            "required": true,
            "schema": {
              "maxLength": 100,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The data to create a notification",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNotificationRequest"
              },
              "examples": {
                "Create Email Notification": {
                  "value": {
                    "notificationId": "TestId",
                    "displayName": "TestDisplayName",
                    "description": "TestDescription",
                    "notificationType": {
                      "Type": "Email",
                      "Subject": "Event with id of {{id}}",
                      "PlainTextBody": "Event with message {{message}} and subject {{subject}}",
                      "HtmlBody": "<p>Event with message {{message}} and subject {{subject}}</p>",
                      "EmailAddressTo": [
                        "recipient@finbourne.com"
                      ],
                      "EmailAddressCc": [
                        "recipientcc@finbourne.com"
                      ],
                      "EmailAddressBcc": [
                        "recipientbcc@finbourne.com"
                      ]
                    }
                  }
                },
                "Create SMS Notification": {
                  "value": {
                    "notificationId": "TestId",
                    "displayName": "TestDisplayName",
                    "description": "TestDescription",
                    "notificationType": {
                      "Type": "Sms",
                      "Body": "Event with message {{message}} and subject {{subject}}",
                      "Recipients": [
                        "+447000000000"
                      ]
                    }
                  }
                },
                "Create Api Request Notification": {
                  "value": {
                    "notificationId": "TestId",
                    "displayName": "TestDisplayName",
                    "description": "TestDescription",
                    "notificationType": {
                      "Type": "ApiRequest",
                      "HttpMethod": "Post",
                      "PathAndQuery": "notification/api/{{id}}/path?examplequery={{id}}",
                      "Content": {
                        "Key": "Value Example",
                        "MessageKey": "{{message}}"
                      }
                    }
                  }
                },
                "Create Webhook Notification": {
                  "value": {
                    "notificationId": "TestId",
                    "displayName": "TestDisplayName",
                    "description": "TestDescription",
                    "notificationType": {
                      "Type": "Webhook",
                      "HttpMethod": "Post",
                      "Url": "https://example.com/api/{{id}}/path?examplequery={{id}}",
                      "AuthenticationType": "BearerToken",
                      "AuthenticationConfigurationItemPaths": {
                        "BearerToken": "config://personal/myUserId/WebhookConfigurations/ExampleService/BearerToken"
                      },
                      "ContentType": "Json",
                      "Content": {
                        "Key": "Value Example",
                        "MessageKey": "{{message}}"
                      }
                    }
                  }
                },
                "Create AWS SQS Notification": {
                  "value": {
                    "notificationId": "TestId",
                    "displayName": "TestDisplayName",
                    "description": "Example description",
                    "notificationType": {
                      "Type": "AmazonSqs",
                      "Body": "Event with message {{message}}",
                      "ApiKeyRef": "config://shared/official/system-a-config/apiKey",
                      "ApiSecretRef": "config://shared/official/system-a-config/apiSecret",
                      "QueueUrlRef": "config://shared/official/system-a-config/queueUrl"
                    }
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNotificationRequest"
              },
              "examples": {
                "Create Email Notification": {
                  "value": {
                    "notificationId": "TestId",
                    "displayName": "TestDisplayName",
                    "description": "TestDescription",
                    "notificationType": {
                      "Type": "Email",
                      "Subject": "Event with id of {{id}}",
                      "PlainTextBody": "Event with message {{message}} and subject {{subject}}",
                      "HtmlBody": "<p>Event with message {{message}} and subject {{subject}}</p>",
                      "EmailAddressTo": [
                        "recipient@finbourne.com"
                      ],
                      "EmailAddressCc": [
                        "recipientcc@finbourne.com"
                      ],
                      "EmailAddressBcc": [
                        "recipientbcc@finbourne.com"
                      ]
                    }
                  }
                },
                "Create SMS Notification": {
                  "value": {
                    "notificationId": "TestId",
                    "displayName": "TestDisplayName",
                    "description": "TestDescription",
                    "notificationType": {
                      "Type": "Sms",
                      "Body": "Event with message {{message}} and subject {{subject}}",
                      "Recipients": [
                        "+447000000000"
                      ]
                    }
                  }
                },
                "Create Api Request Notification": {
                  "value": {
                    "notificationId": "TestId",
                    "displayName": "TestDisplayName",
                    "description": "TestDescription",
                    "notificationType": {
                      "Type": "ApiRequest",
                      "HttpMethod": "Post",
                      "PathAndQuery": "notification/api/{{id}}/path?examplequery={{id}}",
                      "Content": {
                        "Key": "Value Example",
                        "MessageKey": "{{message}}"
                      }
                    }
                  }
                },
                "Create Webhook Notification": {
                  "value": {
                    "notificationId": "TestId",
                    "displayName": "TestDisplayName",
                    "description": "TestDescription",
                    "notificationType": {
                      "Type": "Webhook",
                      "HttpMethod": "Post",
                      "Url": "https://example.com/api/{{id}}/path?examplequery={{id}}",
                      "AuthenticationType": "BearerToken",
                      "AuthenticationConfigurationItemPaths": {
                        "BearerToken": "config://personal/myUserId/WebhookConfigurations/ExampleService/BearerToken"
                      },
                      "ContentType": "Json",
                      "Content": {
                        "Key": "Value Example",
                        "MessageKey": "{{message}}"
                      }
                    }
                  }
                },
                "Create AWS SQS Notification": {
                  "value": {
                    "notificationId": "TestId",
                    "displayName": "TestDisplayName",
                    "description": "Example description",
                    "notificationType": {
                      "Type": "AmazonSqs",
                      "Body": "Event with message {{message}}",
                      "ApiKeyRef": "config://shared/official/system-a-config/apiKey",
                      "ApiSecretRef": "config://shared/official/system-a-config/apiSecret",
                      "QueueUrlRef": "config://shared/official/system-a-config/queueUrl"
                    }
                  }
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNotificationRequest"
              },
              "examples": {
                "Create Email Notification": {
                  "value": {
                    "notificationId": "TestId",
                    "displayName": "TestDisplayName",
                    "description": "TestDescription",
                    "notificationType": {
                      "Type": "Email",
                      "Subject": "Event with id of {{id}}",
                      "PlainTextBody": "Event with message {{message}} and subject {{subject}}",
                      "HtmlBody": "<p>Event with message {{message}} and subject {{subject}}</p>",
                      "EmailAddressTo": [
                        "recipient@finbourne.com"
                      ],
                      "EmailAddressCc": [
                        "recipientcc@finbourne.com"
                      ],
                      "EmailAddressBcc": [
                        "recipientbcc@finbourne.com"
                      ]
                    }
                  }
                },
                "Create SMS Notification": {
                  "value": {
                    "notificationId": "TestId",
                    "displayName": "TestDisplayName",
                    "description": "TestDescription",
                    "notificationType": {
                      "Type": "Sms",
                      "Body": "Event with message {{message}} and subject {{subject}}",
                      "Recipients": [
                        "+447000000000"
                      ]
                    }
                  }
                },
                "Create Api Request Notification": {
                  "value": {
                    "notificationId": "TestId",
                    "displayName": "TestDisplayName",
                    "description": "TestDescription",
                    "notificationType": {
                      "Type": "ApiRequest",
                      "HttpMethod": "Post",
                      "PathAndQuery": "notification/api/{{id}}/path?examplequery={{id}}",
                      "Content": {
                        "Key": "Value Example",
                        "MessageKey": "{{message}}"
                      }
                    }
                  }
                },
                "Create Webhook Notification": {
                  "value": {
                    "notificationId": "TestId",
                    "displayName": "TestDisplayName",
                    "description": "TestDescription",
                    "notificationType": {
                      "Type": "Webhook",
                      "HttpMethod": "Post",
                      "Url": "https://example.com/api/{{id}}/path?examplequery={{id}}",
                      "AuthenticationType": "BearerToken",
                      "AuthenticationConfigurationItemPaths": {
                        "BearerToken": "config://personal/myUserId/WebhookConfigurations/ExampleService/BearerToken"
                      },
                      "ContentType": "Json",
                      "Content": {
                        "Key": "Value Example",
                        "MessageKey": "{{message}}"
                      }
                    }
                  }
                },
                "Create AWS SQS Notification": {
                  "value": {
                    "notificationId": "TestId",
                    "displayName": "TestDisplayName",
                    "description": "Example description",
                    "notificationType": {
                      "Type": "AmazonSqs",
                      "Body": "Event with message {{message}}",
                      "ApiKeyRef": "config://shared/official/system-a-config/apiKey",
                      "ApiSecretRef": "config://shared/official/system-a-config/apiSecret",
                      "QueueUrlRef": "config://shared/official/system-a-config/queueUrl"
                    }
                  }
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNotificationRequest"
              },
              "examples": {
                "Create Email Notification": {
                  "value": {
                    "notificationId": "TestId",
                    "displayName": "TestDisplayName",
                    "description": "TestDescription",
                    "notificationType": {
                      "Type": "Email",
                      "Subject": "Event with id of {{id}}",
                      "PlainTextBody": "Event with message {{message}} and subject {{subject}}",
                      "HtmlBody": "<p>Event with message {{message}} and subject {{subject}}</p>",
                      "EmailAddressTo": [
                        "recipient@finbourne.com"
                      ],
                      "EmailAddressCc": [
                        "recipientcc@finbourne.com"
                      ],
                      "EmailAddressBcc": [
                        "recipientbcc@finbourne.com"
                      ]
                    }
                  }
                },
                "Create SMS Notification": {
                  "value": {
                    "notificationId": "TestId",
                    "displayName": "TestDisplayName",
                    "description": "TestDescription",
                    "notificationType": {
                      "Type": "Sms",
                      "Body": "Event with message {{message}} and subject {{subject}}",
                      "Recipients": [
                        "+447000000000"
                      ]
                    }
                  }
                },
                "Create Api Request Notification": {
                  "value": {
                    "notificationId": "TestId",
                    "displayName": "TestDisplayName",
                    "description": "TestDescription",
                    "notificationType": {
                      "Type": "ApiRequest",
                      "HttpMethod": "Post",
                      "PathAndQuery": "notification/api/{{id}}/path?examplequery={{id}}",
                      "Content": {
                        "Key": "Value Example",
                        "MessageKey": "{{message}}"
                      }
                    }
                  }
                },
                "Create Webhook Notification": {
                  "value": {
                    "notificationId": "TestId",
                    "displayName": "TestDisplayName",
                    "description": "TestDescription",
                    "notificationType": {
                      "Type": "Webhook",
                      "HttpMethod": "Post",
                      "Url": "https://example.com/api/{{id}}/path?examplequery={{id}}",
                      "AuthenticationType": "BearerToken",
                      "AuthenticationConfigurationItemPaths": {
                        "BearerToken": "config://personal/myUserId/WebhookConfigurations/ExampleService/BearerToken"
                      },
                      "ContentType": "Json",
                      "Content": {
                        "Key": "Value Example",
                        "MessageKey": "{{message}}"
                      }
                    }
                  }
                },
                "Create AWS SQS Notification": {
                  "value": {
                    "notificationId": "TestId",
                    "displayName": "TestDisplayName",
                    "description": "Example description",
                    "notificationType": {
                      "Type": "AmazonSqs",
                      "Body": "Event with message {{message}}",
                      "ApiKeyRef": "config://shared/official/system-a-config/apiKey",
                      "ApiSecretRef": "config://shared/official/system-a-config/apiSecret",
                      "QueueUrlRef": "config://shared/official/system-a-config/queueUrl"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Notification"
                },
                "examples": {
                  "Email Notification": {
                    "value": {
                      "notificationId": "ExampleId",
                      "displayName": "Example name",
                      "description": "Example description",
                      "notificationType": {
                        "type": "Email",
                        "subject": "Event with id of {{id}}",
                        "plainTextBody": "Event with message {{message}} and subject {{subject}}",
                        "htmlBody": "<p>Event with message {{message}} and subject {{subject}}</p>",
                        "emailAddressTo": [
                          "recipient@finbourne.com"
                        ],
                        "emailAddressCc": [
                          "recipientcc@finbourne.com"
                        ],
                        "emailAddressBcc": [
                          "recipientbcc@finbourne.com"
                        ]
                      },
                      "createdAt": "2020-06-15T12:00:00.0000000+00:00",
                      "userIdCreated": "Example user",
                      "modifiedAt": "2020-06-20T12:00:00.0000000+00:00",
                      "userIdModified": "Example user",
                      "href": "http://fbn-test/api/subscriptions/testScope/testCode/notifications/ExampleId"
                    }
                  },
                  "SMS Notification": {
                    "value": {
                      "notificationId": "ExampleId",
                      "displayName": "Example name",
                      "description": "Example description",
                      "notificationType": {
                        "type": "Sms",
                        "body": "Event with message {{message}} and subject {{subject}}",
                        "recipients": [
                          "+447000000000"
                        ]
                      },
                      "createdAt": "2020-06-15T12:00:00.0000000+00:00",
                      "userIdCreated": "Example user",
                      "modifiedAt": "2020-06-20T12:00:00.0000000+00:00",
                      "userIdModified": "Example user",
                      "href": "http://fbn-test/api/subscriptions/testScope/testCode/notifications/ExampleId"
                    }
                  },
                  "Api Request Notification": {
                    "value": {
                      "notificationId": "ExampleId",
                      "displayName": "Example name",
                      "description": "Example description",
                      "notificationType": {
                        "type": "ApiRequest",
                        "httpMethod": "Post",
                        "pathAndQuery": "notification/api/{{id}}/path?examplequery={{id}}",
                        "content": {
                          "Key": "Value Example",
                          "MessageKey": "{{message}}"
                        }
                      },
                      "createdAt": "2020-06-15T12:00:00.0000000+00:00",
                      "userIdCreated": "Example user",
                      "modifiedAt": "2020-06-20T12:00:00.0000000+00:00",
                      "userIdModified": "Example user",
                      "href": "http://fbn-test/api/subscriptions/testScope/testCode/notifications/ExampleId"
                    }
                  },
                  "Webhook Notification": {
                    "value": {
                      "notificationId": "ExampleId",
                      "displayName": "Example name",
                      "description": "Example description",
                      "notificationType": {
                        "Content": {
                          "Key": "Value Example",
                          "MessageKey": "{{message}}"
                        },
                        "type": "Webhook",
                        "httpMethod": "Post",
                        "url": "https://example.com/api/{{id}}/path?examplequery={{id}}",
                        "authenticationType": "BearerToken",
                        "contentType": "Json",
                        "AuthenticationConfigurationItemPaths": {
                          "BearerToken": "config://personal/myUserId/WebhookConfigurations/ExampleService/BearerToken"
                        }
                      },
                      "createdAt": "2020-06-15T12:00:00.0000000+00:00",
                      "userIdCreated": "Example user",
                      "modifiedAt": "2020-06-20T12:00:00.0000000+00:00",
                      "userIdModified": "Example user",
                      "href": "http://fbn-test/api/subscriptions/testScope/testCode/notifications/ExampleId"
                    }
                  },
                  "AWS SQS Notification": {
                    "value": {
                      "notificationId": "ExampleId",
                      "displayName": "Example name",
                      "description": "Example description",
                      "notificationType": {
                        "type": "AmazonSqs",
                        "body": "Event with message {{message}}",
                        "apiKeyRef": "config://shared/official/system-a-config/apiKey",
                        "apiSecretRef": "config://shared/official/system-a-config/apiSecretRef",
                        "queueUrlRef": "config://shared/official/system-a-config/queueUrl"
                      },
                      "createdAt": "2020-06-15T12:00:00.0000000+00:00",
                      "userIdCreated": "Example user",
                      "modifiedAt": "2020-06-20T12:00:00.0000000+00:00",
                      "userIdModified": "Example user",
                      "href": "http://fbn-test/api/subscriptions/testScope/testCode/notifications/ExampleId"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/subscriptions/{scope}/{code}/notifications/{id}": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "[EXPERIMENTAL] GetNotification: Get a notification on a subscription.",
        "operationId": "GetNotification",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope that identifies a subscription",
            "required": true,
            "schema": {
              "maxLength": 100,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code that identifies a subscription",
            "required": true,
            "schema": {
              "maxLength": 100,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the notification",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Notification"
                },
                "example": {
                  "notificationId": "ExampleId",
                  "displayName": "Example name",
                  "description": "Example description",
                  "notificationType": {
                    "type": "AmazonSqs",
                    "body": "Event with message {{message}}",
                    "apiKeyRef": "config://shared/official/system-a-config/apiKey",
                    "apiSecretRef": "config://shared/official/system-a-config/apiSecretRef",
                    "queueUrlRef": "config://shared/official/system-a-config/queueUrl"
                  },
                  "createdAt": "2020-06-15T12:00:00.0000000+00:00",
                  "userIdCreated": "Example user",
                  "modifiedAt": "2020-06-20T12:00:00.0000000+00:00",
                  "userIdModified": "Example user",
                  "href": "http://fbn-test/api/subscriptions/testScope/testCode/notifications/ExampleId"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "No notification exists in current scope",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "put": {
        "tags": [
          "Notifications"
        ],
        "summary": "[EXPERIMENTAL] UpdateNotification: Update a Notification for a Subscription",
        "operationId": "UpdateNotification",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope that identifies a subscription",
            "required": true,
            "schema": {
              "maxLength": 100,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code that identifies a subscription",
            "required": true,
            "schema": {
              "maxLength": 100,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the notification",
            "required": true,
            "schema": {
              "maxLength": 100,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The data to update a notification",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNotificationRequest"
              },
              "examples": {
                "Update Email Notification": {
                  "value": {
                    "displayName": "TestDisplayName",
                    "description": "Example description",
                    "notificationType": {
                      "Type": "Email",
                      "Subject": "Event with id of {{id}}",
                      "PlainTextBody": "Event with message {{message}} and subject {{subject}}",
                      "HtmlBody": "<p>Event with message {{message}} and subject {{subject}}</p>",
                      "EmailAddressTo": [
                        "recipient@finbourne.com"
                      ],
                      "EmailAddressCc": [
                        "recipientcc@finbourne.com"
                      ],
                      "EmailAddressBcc": [
                        "recipientbcc@finbourne.com"
                      ]
                    }
                  }
                },
                "Update SMS Notification": {
                  "value": {
                    "displayName": "TestDisplayName",
                    "description": "Example description",
                    "notificationType": {
                      "Type": "Sms",
                      "Body": "Event with message {{message}} and subject {{subject}}",
                      "Recipients": [
                        "+447000000000"
                      ]
                    }
                  }
                },
                "Update Api Request Notification": {
                  "value": {
                    "displayName": "TestDisplayName",
                    "description": "Example description",
                    "notificationType": {
                      "Type": "ApiRequest",
                      "HttpMethod": "Post",
                      "PathAndQuery": "notification/api/{{id}}/path?examplequery={{id}}",
                      "Content": {
                        "Key": "Value Example",
                        "MessageKey": "{{message}}"
                      }
                    }
                  }
                },
                "Update Webhook Notification": {
                  "value": {
                    "displayName": "TestDisplayName",
                    "description": "Example description",
                    "notificationType": {
                      "Type": "Webhook",
                      "HttpMethod": "Post",
                      "Url": "https://example.com/api/{{id}}/path?examplequery={{id}}",
                      "AuthenticationType": "BearerToken",
                      "AuthenticationConfigurationItemPaths": {
                        "BearerToken": "config://personal/myUserId/WebhookConfigurations/ExampleService/BearerToken"
                      },
                      "ContentType": "Json",
                      "Content": {
                        "Key": "Value Example",
                        "MessageKey": "{{message}}"
                      }
                    }
                  }
                },
                "Update AWS SQS Notification": {
                  "value": {
                    "displayName": "TestDisplayName",
                    "description": "Example description",
                    "notificationType": {
                      "Type": "AmazonSqs",
                      "Body": "Event with message {{message}}",
                      "ApiKeyRef": "config://shared/official/system-a-config/apiKey",
                      "ApiSecretRef": "config://shared/official/system-a-config/apiSecret",
                      "QueueUrlRef": "config://shared/official/system-a-config/queueUrl"
                    }
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNotificationRequest"
              },
              "examples": {
                "Update Email Notification": {
                  "value": {
                    "displayName": "TestDisplayName",
                    "description": "Example description",
                    "notificationType": {
                      "Type": "Email",
                      "Subject": "Event with id of {{id}}",
                      "PlainTextBody": "Event with message {{message}} and subject {{subject}}",
                      "HtmlBody": "<p>Event with message {{message}} and subject {{subject}}</p>",
                      "EmailAddressTo": [
                        "recipient@finbourne.com"
                      ],
                      "EmailAddressCc": [
                        "recipientcc@finbourne.com"
                      ],
                      "EmailAddressBcc": [
                        "recipientbcc@finbourne.com"
                      ]
                    }
                  }
                },
                "Update SMS Notification": {
                  "value": {
                    "displayName": "TestDisplayName",
                    "description": "Example description",
                    "notificationType": {
                      "Type": "Sms",
                      "Body": "Event with message {{message}} and subject {{subject}}",
                      "Recipients": [
                        "+447000000000"
                      ]
                    }
                  }
                },
                "Update Api Request Notification": {
                  "value": {
                    "displayName": "TestDisplayName",
                    "description": "Example description",
                    "notificationType": {
                      "Type": "ApiRequest",
                      "HttpMethod": "Post",
                      "PathAndQuery": "notification/api/{{id}}/path?examplequery={{id}}",
                      "Content": {
                        "Key": "Value Example",
                        "MessageKey": "{{message}}"
                      }
                    }
                  }
                },
                "Update Webhook Notification": {
                  "value": {
                    "displayName": "TestDisplayName",
                    "description": "Example description",
                    "notificationType": {
                      "Type": "Webhook",
                      "HttpMethod": "Post",
                      "Url": "https://example.com/api/{{id}}/path?examplequery={{id}}",
                      "AuthenticationType": "BearerToken",
                      "AuthenticationConfigurationItemPaths": {
                        "BearerToken": "config://personal/myUserId/WebhookConfigurations/ExampleService/BearerToken"
                      },
                      "ContentType": "Json",
                      "Content": {
                        "Key": "Value Example",
                        "MessageKey": "{{message}}"
                      }
                    }
                  }
                },
                "Update AWS SQS Notification": {
                  "value": {
                    "displayName": "TestDisplayName",
                    "description": "Example description",
                    "notificationType": {
                      "Type": "AmazonSqs",
                      "Body": "Event with message {{message}}",
                      "ApiKeyRef": "config://shared/official/system-a-config/apiKey",
                      "ApiSecretRef": "config://shared/official/system-a-config/apiSecret",
                      "QueueUrlRef": "config://shared/official/system-a-config/queueUrl"
                    }
                  }
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNotificationRequest"
              },
              "examples": {
                "Update Email Notification": {
                  "value": {
                    "displayName": "TestDisplayName",
                    "description": "Example description",
                    "notificationType": {
                      "Type": "Email",
                      "Subject": "Event with id of {{id}}",
                      "PlainTextBody": "Event with message {{message}} and subject {{subject}}",
                      "HtmlBody": "<p>Event with message {{message}} and subject {{subject}}</p>",
                      "EmailAddressTo": [
                        "recipient@finbourne.com"
                      ],
                      "EmailAddressCc": [
                        "recipientcc@finbourne.com"
                      ],
                      "EmailAddressBcc": [
                        "recipientbcc@finbourne.com"
                      ]
                    }
                  }
                },
                "Update SMS Notification": {
                  "value": {
                    "displayName": "TestDisplayName",
                    "description": "Example description",
                    "notificationType": {
                      "Type": "Sms",
                      "Body": "Event with message {{message}} and subject {{subject}}",
                      "Recipients": [
                        "+447000000000"
                      ]
                    }
                  }
                },
                "Update Api Request Notification": {
                  "value": {
                    "displayName": "TestDisplayName",
                    "description": "Example description",
                    "notificationType": {
                      "Type": "ApiRequest",
                      "HttpMethod": "Post",
                      "PathAndQuery": "notification/api/{{id}}/path?examplequery={{id}}",
                      "Content": {
                        "Key": "Value Example",
                        "MessageKey": "{{message}}"
                      }
                    }
                  }
                },
                "Update Webhook Notification": {
                  "value": {
                    "displayName": "TestDisplayName",
                    "description": "Example description",
                    "notificationType": {
                      "Type": "Webhook",
                      "HttpMethod": "Post",
                      "Url": "https://example.com/api/{{id}}/path?examplequery={{id}}",
                      "AuthenticationType": "BearerToken",
                      "AuthenticationConfigurationItemPaths": {
                        "BearerToken": "config://personal/myUserId/WebhookConfigurations/ExampleService/BearerToken"
                      },
                      "ContentType": "Json",
                      "Content": {
                        "Key": "Value Example",
                        "MessageKey": "{{message}}"
                      }
                    }
                  }
                },
                "Update AWS SQS Notification": {
                  "value": {
                    "displayName": "TestDisplayName",
                    "description": "Example description",
                    "notificationType": {
                      "Type": "AmazonSqs",
                      "Body": "Event with message {{message}}",
                      "ApiKeyRef": "config://shared/official/system-a-config/apiKey",
                      "ApiSecretRef": "config://shared/official/system-a-config/apiSecret",
                      "QueueUrlRef": "config://shared/official/system-a-config/queueUrl"
                    }
                  }
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNotificationRequest"
              },
              "examples": {
                "Update Email Notification": {
                  "value": {
                    "displayName": "TestDisplayName",
                    "description": "Example description",
                    "notificationType": {
                      "Type": "Email",
                      "Subject": "Event with id of {{id}}",
                      "PlainTextBody": "Event with message {{message}} and subject {{subject}}",
                      "HtmlBody": "<p>Event with message {{message}} and subject {{subject}}</p>",
                      "EmailAddressTo": [
                        "recipient@finbourne.com"
                      ],
                      "EmailAddressCc": [
                        "recipientcc@finbourne.com"
                      ],
                      "EmailAddressBcc": [
                        "recipientbcc@finbourne.com"
                      ]
                    }
                  }
                },
                "Update SMS Notification": {
                  "value": {
                    "displayName": "TestDisplayName",
                    "description": "Example description",
                    "notificationType": {
                      "Type": "Sms",
                      "Body": "Event with message {{message}} and subject {{subject}}",
                      "Recipients": [
                        "+447000000000"
                      ]
                    }
                  }
                },
                "Update Api Request Notification": {
                  "value": {
                    "displayName": "TestDisplayName",
                    "description": "Example description",
                    "notificationType": {
                      "Type": "ApiRequest",
                      "HttpMethod": "Post",
                      "PathAndQuery": "notification/api/{{id}}/path?examplequery={{id}}",
                      "Content": {
                        "Key": "Value Example",
                        "MessageKey": "{{message}}"
                      }
                    }
                  }
                },
                "Update Webhook Notification": {
                  "value": {
                    "displayName": "TestDisplayName",
                    "description": "Example description",
                    "notificationType": {
                      "Type": "Webhook",
                      "HttpMethod": "Post",
                      "Url": "https://example.com/api/{{id}}/path?examplequery={{id}}",
                      "AuthenticationType": "BearerToken",
                      "AuthenticationConfigurationItemPaths": {
                        "BearerToken": "config://personal/myUserId/WebhookConfigurations/ExampleService/BearerToken"
                      },
                      "ContentType": "Json",
                      "Content": {
                        "Key": "Value Example",
                        "MessageKey": "{{message}}"
                      }
                    }
                  }
                },
                "Update AWS SQS Notification": {
                  "value": {
                    "displayName": "TestDisplayName",
                    "description": "Example description",
                    "notificationType": {
                      "Type": "AmazonSqs",
                      "Body": "Event with message {{message}}",
                      "ApiKeyRef": "config://shared/official/system-a-config/apiKey",
                      "ApiSecretRef": "config://shared/official/system-a-config/apiSecret",
                      "QueueUrlRef": "config://shared/official/system-a-config/queueUrl"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Notification"
                },
                "example": {
                  "notificationId": "ExampleId",
                  "displayName": "Example name",
                  "description": "Example description",
                  "notificationType": {
                    "type": "AmazonSqs",
                    "body": "Event with message {{message}}",
                    "apiKeyRef": "config://shared/official/system-a-config/apiKey",
                    "apiSecretRef": "config://shared/official/system-a-config/apiSecretRef",
                    "queueUrlRef": "config://shared/official/system-a-config/queueUrl"
                  },
                  "createdAt": "2020-06-15T12:00:00.0000000+00:00",
                  "userIdCreated": "Example user",
                  "modifiedAt": "2020-06-20T12:00:00.0000000+00:00",
                  "userIdModified": "Example user",
                  "href": "http://fbn-test/api/subscriptions/testScope/testCode/notifications/ExampleId"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "No notification exists in current scope",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "delete": {
        "tags": [
          "Notifications"
        ],
        "summary": "[EXPERIMENTAL] DeleteNotification: Delete a notification for a given subscription.",
        "operationId": "DeleteNotification",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope that identifies a subscription",
            "required": true,
            "schema": {
              "maxLength": 100,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code that identifies a subscription",
            "required": true,
            "schema": {
              "maxLength": 100,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the notification",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "No notification exists in current scope",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    }
  },
  "components": {
    "schemas": {
      "AccessControlledAction": {
        "required": [
          "action",
          "description"
        ],
        "type": "object",
        "properties": {
          "description": {
            "minLength": 1,
            "type": "string"
          },
          "action": {
            "$ref": "#/components/schemas/ActionId"
          },
          "limitedSet": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdSelectorDefinition"
            },
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AccessControlledResource": {
        "required": [
          "actions",
          "description"
        ],
        "type": "object",
        "properties": {
          "application": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "minLength": 1,
            "type": "string"
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessControlledAction"
            }
          },
          "identifierParts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentifierPartSchema"
            },
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ActionId": {
        "required": [
          "activity",
          "entity",
          "scope"
        ],
        "type": "object",
        "properties": {
          "scope": {
            "maxLength": 100,
            "minLength": 3,
            "type": "string"
          },
          "activity": {
            "maxLength": 25,
            "minLength": 3,
            "type": "string"
          },
          "entity": {
            "maxLength": 25,
            "minLength": 3,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "AmazonSqsNotificationType": {
        "required": [
          "apiKeyRef",
          "apiSecretRef",
          "body",
          "queueUrlRef",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "minLength": 1,
            "enum": [
              "AmazonSqs"
            ],
            "type": "string",
            "description": "The type of delivery mechanism for this notification"
          },
          "apiKeyRef": {
            "minLength": 1,
            "type": "string",
            "description": "Reference to API key from Configuration Store"
          },
          "apiSecretRef": {
            "minLength": 1,
            "type": "string",
            "description": "Reference to API secret from Configuration Store"
          },
          "body": {
            "maxLength": 1024,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The body of the Amazon Queue Message"
          },
          "queueUrlRef": {
            "minLength": 1,
            "type": "string",
            "description": "Reference to queue url from Configuration Store"
          }
        },
        "additionalProperties": false,
        "description": "The information required to create or update an AWS SQS notification"
      },
      "AmazonSqsNotificationTypeResponse": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/NotificationTypeResponse"
          }
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of delivery mechanism for this notification",
            "nullable": true,
            "readOnly": true
          },
          "apiKeyRef": {
            "type": "string",
            "description": "Reference to API key from Configuration Store",
            "nullable": true
          },
          "apiSecretRef": {
            "type": "string",
            "description": "Reference to API secret from Configuration Store",
            "nullable": true
          },
          "body": {
            "type": "string",
            "description": "The body of the Amazon Queue Message",
            "nullable": true
          },
          "queueUrlRef": {
            "type": "string",
            "description": "Reference to queue url from Configuration Store",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Holds readonly information about an AWS SQS notification"
      },
      "ApiRequestNotificationType": {
        "required": [
          "httpMethod",
          "pathAndQuery",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "minLength": 1,
            "enum": [
              "ApiRequest"
            ],
            "type": "string",
            "description": "The type of delivery mechanism for this notification"
          },
          "httpMethod": {
            "minLength": 1,
            "type": "string",
            "description": "The HTTP method such as GET, POST, etc. to use on the Api Request"
          },
          "pathAndQuery": {
            "maxLength": 16384,
            "minLength": 1,
            "pattern": "^([A-Za-z0-9-._~:\\/?#[\\]@!$&'()*+,;%=]|(\\{\\{([a-zA-Z0-9\\s])*\\}\\}))*$",
            "type": "string",
            "description": "The url to send the request to."
          },
          "content": {
            "description": "The content of the request",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The information required to create or update an Api request notification"
      },
      "ApiRequestNotificationTypeResponse": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/NotificationTypeResponse"
          }
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of delivery mechanism for this notification",
            "nullable": true,
            "readOnly": true
          },
          "httpMethod": {
            "type": "string",
            "description": "The HTTP method such as GET, POST, etc. to use on the Api Request",
            "nullable": true
          },
          "pathAndQuery": {
            "type": "string",
            "description": "The url to send the request to.",
            "nullable": true
          },
          "content": {
            "description": "The content of the request",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Holds readonly information about an API request notification"
      },
      "CreateNotificationRequest": {
        "required": [
          "displayName",
          "notificationId",
          "notificationType"
        ],
        "type": "object",
        "properties": {
          "notificationId": {
            "maxLength": 100,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The identifier of the notification."
          },
          "displayName": {
            "maxLength": 64,
            "minLength": 0,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The name of the notification"
          },
          "description": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The summary of the services provided by the notification",
            "nullable": true
          },
          "notificationType": {
            "$ref": "#/components/schemas/NotificationType"
          }
        },
        "additionalProperties": false,
        "description": "The information required to create a notification"
      },
      "CreateSubscription": {
        "title": "CreateSubscriptionRequest",
        "required": [
          "displayName",
          "id",
          "matchingPattern",
          "status"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "displayName": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The name of the subscription"
          },
          "description": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The summary of the services provided by the subscription",
            "nullable": true
          },
          "status": {
            "minLength": 1,
            "type": "string",
            "description": "The current status of the subscription. Possible values are: Active, Inactive"
          },
          "matchingPattern": {
            "$ref": "#/components/schemas/MatchingPattern"
          },
          "useAsAuth": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The user to authenticate the subscription",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The information required to create a subscription"
      },
      "EmailNotificationType": {
        "required": [
          "emailAddressTo",
          "plainTextBody",
          "subject",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "minLength": 1,
            "enum": [
              "Email"
            ],
            "type": "string",
            "description": "The type of delivery mechanism for this notification"
          },
          "subject": {
            "maxLength": 1024,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The subject of the email"
          },
          "plainTextBody": {
            "maxLength": 2147483647,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The plain text body of the email"
          },
          "htmlBody": {
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The HTML body of the email (if any)",
            "nullable": true
          },
          "emailAddressTo": {
            "maxItems": 10,
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "'To' recipients of the email"
          },
          "emailAddressCc": {
            "maxItems": 10,
            "minItems": 0,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "'Cc' recipients of the email",
            "nullable": true
          },
          "emailAddressBcc": {
            "maxItems": 10,
            "minItems": 0,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "'Bcc' recipients of the email",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The information required to create or update an Email notification"
      },
      "EmailNotificationTypeResponse": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/NotificationTypeResponse"
          }
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of delivery mechanism for this notification",
            "nullable": true,
            "readOnly": true
          },
          "subject": {
            "type": "string",
            "description": "The subject of the email",
            "nullable": true,
            "readOnly": true
          },
          "plainTextBody": {
            "type": "string",
            "description": "The plain text body of the email",
            "nullable": true,
            "readOnly": true
          },
          "htmlBody": {
            "type": "string",
            "description": "The HTML body of the email (if any)",
            "nullable": true,
            "readOnly": true
          },
          "emailAddressTo": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "'To' recipients of the email",
            "nullable": true,
            "readOnly": true
          },
          "emailAddressCc": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "'Cc' recipients of the email",
            "nullable": true,
            "readOnly": true
          },
          "emailAddressBcc": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "'Bcc' recipients of the email",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Holds readonly information about an Email notification"
      },
      "EventFieldDefinition": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the field",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "Type of the field",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An EventFieldDefinition object"
      },
      "EventTypeSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The identifier of the event type",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "description": "Identifier name of the event",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The summary of the event",
            "nullable": true
          },
          "application": {
            "type": "string",
            "description": "The application associated with the event",
            "nullable": true
          },
          "headerSchema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventFieldDefinition"
            },
            "description": "The header schema for the event type",
            "nullable": true,
            "readOnly": true
          },
          "bodySchema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventFieldDefinition"
            },
            "description": "The body schema for the event type",
            "nullable": true,
            "readOnly": true
          },
          "href": {
            "type": "string",
            "description": "A URI for retrieving this schema",
            "format": "uri",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An EventType object"
      },
      "IdentifierPartSchema": {
        "required": [
          "description",
          "displayName",
          "index",
          "name",
          "required"
        ],
        "type": "object",
        "properties": {
          "index": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "displayName": {
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "minLength": 1,
            "type": "string"
          },
          "required": {
            "type": "boolean"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IdSelectorDefinition": {
        "required": [
          "actions",
          "identifier"
        ],
        "type": "object",
        "properties": {
          "identifier": {
            "minLength": 1,
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "actions": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActionId"
            }
          },
          "name": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "description": {
            "maxLength": 1024,
            "minLength": 0,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Link": {
        "required": [
          "href",
          "method",
          "relation"
        ],
        "type": "object",
        "properties": {
          "relation": {
            "type": "string"
          },
          "href": {
            "type": "string",
            "format": "uri"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "LusidProblemDetails": {
        "required": [
          "code",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "errorDetails": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "nullable": true
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LusidValidationProblemDetails": {
        "required": [
          "code",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "errorDetails": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "nullable": true
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "errors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ManualEvent": {
        "required": [
          "body",
          "header"
        ],
        "type": "object",
        "properties": {
          "header": {
            "$ref": "#/components/schemas/ManualEventHeader"
          },
          "body": {
            "$ref": "#/components/schemas/ManualEventBody"
          }
        },
        "additionalProperties": false,
        "description": "Details of a manually triggered event"
      },
      "ManualEventBody": {
        "required": [
          "message",
          "subject"
        ],
        "type": "object",
        "properties": {
          "subject": {
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The subject of the manual event"
          },
          "message": {
            "maxLength": 2147483647,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The message of the manual event"
          },
          "jsonMessage": {
            "description": "The JSON message of the manual event",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The body of the manual event"
      },
      "ManualEventHeader": {
        "type": "object",
        "properties": {
          "eventType": {
            "type": "string",
            "description": "The event type of the manual event",
            "nullable": true,
            "readOnly": true
          },
          "timestamp": {
            "type": "string",
            "description": "The timestamp of the manual event",
            "format": "date-time"
          },
          "userId": {
            "type": "string",
            "description": "The user ID of the manual event",
            "nullable": true
          },
          "requestId": {
            "type": "string",
            "description": "The request ID of the manual event",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The header of the manual event"
      },
      "ManualEventRequest": {
        "required": [
          "body"
        ],
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/components/schemas/ManualEventBody"
          }
        },
        "additionalProperties": false,
        "description": "The information required to trigger a manual event"
      },
      "MatchingPattern": {
        "required": [
          "eventType"
        ],
        "type": "object",
        "properties": {
          "eventType": {
            "maxLength": 512,
            "minLength": 0,
            "pattern": "^[a-zA-Z]*$",
            "type": "string",
            "description": "The type of event to subscribe to. The list of available event types can be discovered\r\nby calling the ‘List available EventTypes’ API endpoint."
          },
          "filter": {
            "maxLength": 16384,
            "minLength": 0,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "A filter on the event. See https://support.lusid.com/filtering-results-from-lusid for more information. If not provided, all events will be matched",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A matching pattern object"
      },
      "Notification": {
        "required": [
          "createdAt",
          "displayName",
          "modifiedAt",
          "notificationId",
          "notificationType",
          "userIdCreated",
          "userIdModified"
        ],
        "type": "object",
        "properties": {
          "notificationId": {
            "minLength": 1,
            "type": "string",
            "description": "The identifier of the notification"
          },
          "displayName": {
            "maxLength": 64,
            "minLength": 0,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The name of the notification"
          },
          "description": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The summary of the services provided by the notification",
            "nullable": true
          },
          "notificationType": {
            "$ref": "#/components/schemas/NotificationTypeResponse"
          },
          "createdAt": {
            "type": "string",
            "description": "The time at which the subscription was made",
            "format": "date-time"
          },
          "userIdCreated": {
            "minLength": 1,
            "type": "string",
            "description": "The user who made the subscription"
          },
          "modifiedAt": {
            "type": "string",
            "description": "The time at which the subscription was last modified",
            "format": "date-time"
          },
          "userIdModified": {
            "minLength": 1,
            "type": "string",
            "description": "The user who last modified the subscription"
          },
          "href": {
            "type": "string",
            "description": "A URI for retrieving this notification",
            "format": "uri",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A notification object"
      },
      "NotificationStatus": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "The status of the notification",
            "nullable": true
          },
          "lastUpdated": {
            "type": "string",
            "description": "The time at which the notification status was last updated",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "The status object of a notification"
      },
      "NotificationType": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/AmazonSqsNotificationType"
          },
          {
            "$ref": "#/components/schemas/ApiRequestNotificationType"
          },
          {
            "$ref": "#/components/schemas/EmailNotificationType"
          },
          {
            "$ref": "#/components/schemas/SmsNotificationType"
          },
          {
            "$ref": "#/components/schemas/WebhookNotificationType"
          }
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of delivery mechanism for this notification",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Holds information about a Finbourne.Notifications.WebApi.Dtos.Notifications.Notification that is being created"
      },
      "NotificationTypeResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of delivery mechanism for this notification",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Holds readonly information about a Finbourne.Notifications.WebApi.Dtos.Notifications.Notification"
      },
      "ResourceId": {
        "required": [
          "code",
          "scope"
        ],
        "type": "object",
        "properties": {
          "scope": {
            "maxLength": 512,
            "minLength": 1,
            "type": "string",
            "description": "The scope used to identify an entity"
          },
          "code": {
            "maxLength": 512,
            "minLength": 1,
            "type": "string",
            "description": "The code used to identify an entity"
          }
        },
        "additionalProperties": false,
        "description": "Identifiers of an entity"
      },
      "ResourceListOfAccessControlledResource": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessControlledResource"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResourceListOfEventTypeSchema": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventTypeSchema"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResourceListOfNotification": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Notification"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResourceListOfSubscription": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Subscription"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SmsNotificationType": {
        "required": [
          "body",
          "recipients",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "minLength": 1,
            "enum": [
              "Sms"
            ],
            "type": "string",
            "description": "The type of delivery mechanism for this notification"
          },
          "body": {
            "maxLength": 1024,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The body of the SMS"
          },
          "recipients": {
            "maxItems": 10,
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The phone numbers to which the SMS will be sent to (E.164 format)"
          }
        },
        "additionalProperties": false,
        "description": "The information required to create or update an SMS notification"
      },
      "SmsNotificationTypeResponse": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/NotificationTypeResponse"
          }
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of delivery mechanism for this notification",
            "nullable": true,
            "readOnly": true
          },
          "body": {
            "type": "string",
            "description": "The body of the SMS",
            "nullable": true
          },
          "recipients": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The phone numbers to which the SMS will be sent to (E.164 format)",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Holds readonly information about an SMS notification"
      },
      "Subscription": {
        "required": [
          "createdAt",
          "displayName",
          "id",
          "matchingPattern",
          "modifiedAt",
          "status",
          "useAsAuth",
          "userIdCreated",
          "userIdModified"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "displayName": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the subscription"
          },
          "description": {
            "type": "string",
            "description": "The summary of the services provided by the subscription",
            "nullable": true
          },
          "status": {
            "minLength": 1,
            "type": "string",
            "description": "The current status of the subscription"
          },
          "matchingPattern": {
            "$ref": "#/components/schemas/MatchingPattern"
          },
          "createdAt": {
            "type": "string",
            "description": "The time at which the subscription was made",
            "format": "date-time"
          },
          "userIdCreated": {
            "minLength": 1,
            "type": "string",
            "description": "The user who made the subscription"
          },
          "modifiedAt": {
            "type": "string",
            "description": "The time at which the subscription was last modified",
            "format": "date-time"
          },
          "userIdModified": {
            "minLength": 1,
            "type": "string",
            "description": "The user who last modified the subscription"
          },
          "useAsAuth": {
            "minLength": 1,
            "type": "string",
            "description": "The user to use as auth for the subscription"
          },
          "href": {
            "type": "string",
            "description": "A URI for retrieving this subscription",
            "format": "uri",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A subscription object"
      },
      "UpdateNotificationRequest": {
        "required": [
          "displayName",
          "notificationType"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "maxLength": 64,
            "minLength": 0,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The name of the notification"
          },
          "description": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The summary of the services provided by the notification",
            "nullable": true
          },
          "notificationType": {
            "$ref": "#/components/schemas/NotificationType"
          }
        },
        "additionalProperties": false,
        "description": "The information required to update a notification"
      },
      "UpdateSubscription": {
        "title": "UpdateSubscriptionRequest",
        "required": [
          "displayName",
          "matchingPattern",
          "status"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The name of the subscription"
          },
          "description": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The summary of the services provided by the subscription",
            "nullable": true
          },
          "status": {
            "minLength": 1,
            "type": "string",
            "description": "The current status of the subscription. Possible values are: Active, Inactive"
          },
          "matchingPattern": {
            "$ref": "#/components/schemas/MatchingPattern"
          },
          "useAsAuth": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The user to authenticate with for subscriptions",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The information required to update a subscription"
      },
      "WebhookNotificationType": {
        "required": [
          "authenticationType",
          "contentType",
          "httpMethod",
          "type",
          "url"
        ],
        "type": "object",
        "properties": {
          "type": {
            "minLength": 1,
            "enum": [
              "Webhook"
            ],
            "type": "string",
            "description": "The type of delivery mechanism for this notification"
          },
          "httpMethod": {
            "minLength": 1,
            "type": "string",
            "description": "The HTTP method such as GET, POST, etc. to use on the request"
          },
          "url": {
            "maxLength": 16384,
            "minLength": 1,
            "pattern": "^([A-Za-z0-9-._~:\\/?#[\\]@!$&'()*+,;%=]|(\\{\\{([a-zA-Z0-9\\s])*\\}\\}))*$",
            "type": "string",
            "description": "The URL to send the request to"
          },
          "authenticationType": {
            "minLength": 1,
            "type": "string",
            "description": "The type of authentication to use on the request"
          },
          "authenticationConfigurationItemPaths": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The paths of the Configuration Store configuration items that contain the authentication configuration. Each\r\nauthentication type requires different keys:\r\n- Lusid - None required\r\n- BasicAuth - Requires 'Username' and 'Password'\r\n- BearerToken - Requires 'BearerToken' and optionally 'BearerScheme'\r\n            \r\ne.g. the following would be valid assuming that the config is present in the configuration store at the\r\nspecified paths:\r\n            \r\n    \"authenticationType\": \"BasicAuth\",\r\n    \"authenticationConfigurationItemPaths\": {\r\n        \"Username\": \"config://personal/myUserId/WebhookConfigurations/ExampleService/AdminUser\",\r\n        \"Password\": \"config://personal/myUserId/WebhookConfigurations/ExampleService/AdminPassword\"\r\n    }",
            "nullable": true
          },
          "contentType": {
            "minLength": 1,
            "type": "string",
            "description": "The type of the content e.g. Json"
          },
          "content": {
            "description": "The content of the request",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The information required to create or update a Webhook notification"
      },
      "WebhookNotificationTypeResponse": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/NotificationTypeResponse"
          }
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of delivery mechanism for this notification",
            "nullable": true,
            "readOnly": true
          },
          "httpMethod": {
            "type": "string",
            "description": "The HTTP method such as GET, POST, etc. to use on the request",
            "nullable": true
          },
          "url": {
            "type": "string",
            "description": "The URL to send the request to",
            "nullable": true
          },
          "authenticationType": {
            "type": "string",
            "description": "The type of authentication to use on the request",
            "nullable": true
          },
          "authenticationConfigurationItemPaths": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The paths of the Configuration Store configuration items that contain the authentication configuration. Each\r\nauthentication type requires different keys:\r\n- Lusid - None required\r\n- BasicAuth - Requires 'Username' and 'Password'\r\n- BearerToken - Requires 'BearerToken' and optionally 'BearerScheme'\r\n            \r\ne.g. the following would be valid assuming that the config is present in the configuration store at the\r\nspecified paths:\r\n            \r\n    \"authenticationType\": \"BasicAuth\",\r\n    \"authenticationConfigurationItemPaths\": {\r\n        \"Username\": \"config://personal/myUserId/WebhookConfigurations/ExampleService/AdminUser\",\r\n        \"Password\": \"config://personal/myUserId/WebhookConfigurations/ExampleService/AdminPassword\"\r\n    }",
            "nullable": true
          },
          "contentType": {
            "type": "string",
            "description": "The type of the content e.g. Json",
            "nullable": true
          },
          "content": {
            "description": "The content of the request",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Holds readonly information about a Webhook notification"
      }
    },
    "securitySchemes": {
      "oauth2": {
        "type": "oauth2",
        "description": "OAuth2 Implicit Grant",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://lusid.okta.com/oauth2/default/v1/authorize",
            "scopes": {}
          }
        }
      }
    }
  },
  "security": [
    {}
  ],
  "tags": [
    {
      "name": "Application Metadata",
      "description": "Metadata about the application"
    },
    {
      "name": "EventTypes",
      "description": "Methods for discovering possible event types."
    },
    {
      "name": "ManualEvent",
      "description": "Methods for triggering events."
    },
    {
      "name": "Notifications",
      "description": "Methods for managing a subscription's notifications."
    },
    {
      "name": "Subscriptions",
      "description": "Methods for managing subscriptions"
    }
  ],
  "x-tagGroups": {
    "name": "API",
    "tags": [
      "Application Metadata",
      "EventTypes",
      "ManualEvent",
      "Notifications",
      "Subscriptions"
    ]
  }
}
